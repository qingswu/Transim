//*********************************************************
//	Bounded_Queue.hpp - fixed length circular queue
//*********************************************************

#ifndef BOUNDED_QUEUE_HPP
#define BOUNDED_QUEUE_HPP

#include "APIDefs.hpp"

#include <vector>
using namespace std;

//---------------------------------------------------------
//	Bounded_Queue -- template class definition
//---------------------------------------------------------
//	Bounded_Queue <Type> (int max_records = 200);
//
//	bool Put (Type &data);
//
//  bool Get (Type &data);
//
//	bool Full (void);
//	bool Empty (void);
//
//	void Reset (void);
//
//	int  Num_Records (void);
//
//	bool Max_Records (int max_records);
//---------------------------------------------------------

template <typename Type>
class SYSLIB_API Bounded_Queue
{
	typedef vector <Type> Type_Array;

public:

	//---------------------------------------------------------
	//	Bounded_Queue constructor
	//---------------------------------------------------------

	Bounded_Queue (int _max_records = 200)
	{
		Reset ();
		Max_Records (_max_records);
	}

	//---------------------------------------------------------
	//	Put
	//---------------------------------------------------------

	bool Put (Type &data)
	{
		if (num_records == max_records) return (false);

		num_records++;
		type_array [last_index++] = data;

		if (last_index >= max_records) last_index = 0;
		return (true);
	}

	//---------------------------------------------------------
	//	Get
	//---------------------------------------------------------

	bool Get (Type &data)
	{
		if (num_records == 0) return (false);

		num_records--;
		data = type_array [first_index++];

		if (first_index >= max_records) first_index = 0;
		return (true);
	}

	//---------------------------------------------------------
	//	Full
	//---------------------------------------------------------

	bool Full (void)
	{
		return (num_records == max_records);
	}

	//---------------------------------------------------------
	//	Empty
	//---------------------------------------------------------

	bool Empty (void)
	{
		return (num_records == 0);
	}

	//---------------------------------------------------------
	//	Reset
	//---------------------------------------------------------

	void Reset (void)
	{
		num_records = first_index = last_index = 0;
	}

	//---------------------------------------------------------
	//	Max_Records
	//---------------------------------------------------------

	bool Max_Records (int max_size)
	{
		type_array.resize (max_size);
		max_records = (int) type_array.size ();
		return (max_records > 0);
	}

private:

	//---- data ----

	int num_records, max_records, first_index, last_index;

	Type_Array type_array;
};
#endif

