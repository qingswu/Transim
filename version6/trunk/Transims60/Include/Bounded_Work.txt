//*********************************************************
//	Bounded_Work.hpp - fixed length circular queue
//*********************************************************

#ifdef THREADS
#ifndef BOUNDED_WORK_HPP
#define BOUNDED_WORK_HPP

//---------------------------------------------------------
//	Bounded_Work -- template class definition
//---------------------------------------------------------
//	Bounded_Work <Type> (int max_records = 200);
//
//	void Put (Type &data);
//  bool Get (Type &data);
//
//	void End_of_Work (void);
//  void Complete_Work (void);
//
//	bool Max_Records (int max_records);
//---------------------------------------------------------

#include "Bounded_Queue.hpp"
#include "Threads.hpp"

//---------------------------------------------------------
//	Bounded_Work template
//---------------------------------------------------------

template <typename Type>
class Bounded_Work
{
public:

	//---------------------------------------------------------
	//	Bounded_Work constructor
	//---------------------------------------------------------

	Bounded_Work (int _max_records = 200)
	{
		Reset ();
		Max_Records (_max_records);
	}

	//---------------------------------------------------------
	//	operator ()
	//---------------------------------------------------------

	void operator()()
	{
		mutex_lock lock (queue_mutex);
		exit_wait.wait (lock);
	}

	//---------------------------------------------------------
	//	Put
	//---------------------------------------------------------

	void Put (Type &data)
	{
		mutex_lock lock (queue_mutex);

		while (type_queue.Full ()) {
			queue_full.wait (lock);
		}
		if (type_queue.Put (data)) {
			queue_empty.notify_one ();
		}
	}

	//---------------------------------------------------------
	//	Get
	//---------------------------------------------------------

	bool Get (Type &data)
	{
		mutex_lock lock (queue_mutex);

		while (!exit_flag && !end_flag && type_queue.Empty ()) {
			queue_empty.wait (lock);
		}
		if (type_queue.Empty ()) {
			if (exit_flag) {
				queue_empty.notify_all ();
				return (false);
			}
			if (end_flag) {
				end_flag = false;
				end_wait.notify_one ();
				continue;
			}
		}
		type_queue.Get (data);

		queue_full.notify_one ();
		return (true);
	}

	//--------------------------------------------------------
	//	End_Queue
	//--------------------------------------------------------

	void End_Queue (void)
	{
		mutex_lock lock (queue_mutex);

		if (!type_queue.Empty ()) {
			end_flag = true;
			end_wait.wait (lock);
		}
		end_flag = false;
	}

	//---------------------------------------------------------
	//	Exit_Queue
	//---------------------------------------------------------

	void Exit_Queue (void)
	{ 
		mutex_lock lock (queue_mutex);
		exit_flag = true;
		queue_empty.notify_all ();
	}
	
	//---------------------------------------------------------
	//	Reset
	//---------------------------------------------------------

	void Reset (void)
	{
		type_queue.Reset ();
		exit_flag = end_flag = false;
	}

	//---------------------------------------------------------
	//	Max_Records
	//---------------------------------------------------------

	bool Max_Records (int max_size)
	{
		type_array.resize (max_size);
		return ((int) type_array.size () > 0);
	}

private:

	//---- data ----

	bool exit_flag, end_flag;

	condition_variable  queue_full, queue_empty, exit_wait, end_wait;
	mutex  queue_mutex;

	Bounded_Queue <Type> type_queue;
};
#endif
#endif
